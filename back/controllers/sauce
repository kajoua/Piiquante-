// Récupération du modèle Sauce
const Sauce = require("../models/Sauce");
// donne accès aux fonctions qui nous permettent de modifier le système de fichiers, y compris aux fonctions permettant de supprimer les fichiers.
const fs = require("fs");

exports.getAllSauces = (req, res, next) => {
  Sauce.find()
    .then((sauces) => res.status(200).json(sauces))
    .catch((error) => res.status(400).json({ error }));
};
// Création d'une nouvelle sauce
exports.createSauce = (req, res, next) => {
  console.log("creation de sauce reussi");
  const sauceObject = JSON.parse(req.body.sauce);
  console.log(req.body);
  // Id générer automatiquement par MangoDB donc supp
  delete sauceObject._id;
  // delete sauceObject._userId ???? OU .userId ???;
  const sauce = new Sauce({
    // Opérateur spread ... (raccourcie = copier les champs qu'il y a dans le corp de la requête (req.bod.sauce) )
    ...sauceObject,
    userId: req.auth.userId,
    imageUrl: `${req.protocol}://${req.get("host")}/images/${
      req.file.filename
    }`,
    likes: 0,
    dislikes: 0,
    usersLiked: [],
    usersDisliked: [],
  });
  sauce
    .save()
    .then(() => {
      res.status(201).json({ message: "Sauce posté!" });
    })
    .catch((error) => {
      res.status(400).json({ error: error });
    });
};
exports.modifySauce = (req, res, next) => {
  const sauceObject = req.file
    ? {
        ...JSON.parse(req.body.sauce),
        imageUrl: `${req.protocol}://${req.get("host")}/images/${
          req.file.filename
        }`,
      }
    : { ...req.body };
  // delete sauceObject._userId ????  OU userId ???;
  Sauce.findOne({ _id: req.params.id })
    .then((sauce) => {
      if (sauce.userId != req.auth.userId) {
        res.status(401).json({ message: "Non-autorisé" });
      } else {
        Sauce.updateOne(
          { _id: req.params.id },
          { ...sauceObject, _id: req.params.id }
        )
          .then(() => res.statut(200).json({ message: "Sauce modifié" }))
          .catch((error) => res.status(401).json({ error }));
      }
    })
    .catch((error) => res.status(400).json({ error }));
};

exports.deleteSauce = (req, res, next) => {
  Sauce.findOne({ _id: req.params.id })
    .then((sauce) => {
      if (sauce.userId != req.auth.userId) {
        res.status(401).json({ message: "Not authorized" });
      } else {
        const filename = sauce.imageUrl.split("/images/")[1];
        // methode .unlink() permet de supprimer un fichier du système de fichiers.
        fs.unlink(`images/${filename}`, () => {
          Sauce.deleteOne({ _id: req.params.id })
            .then(() => {
              res.status(200).json({ message: "Objet supprimé !" });
            })
            .catch((error) => res.status(401).json({ error }));
        });
      }
    })
    .catch((error) => {
      res.status(500).json({ error });
    });
};
exports.getOneSauce = (req, res, next) => {
  Sauce.findOne({ _id: req.params.id })
    .then((sauce) => res.status(200).json(sauce))
    .catch((error) => res.status(404).json({ error }));
};

exports.likeDislikeSauce = (req, res, next) => {
  let like = req.body.like;
  Sauce.findOne({ _id: req.params.id })
    .then((sauce) => {
      switch (like) {
        case 1:
          Sauce.updateOne(
            { _id: sauce.id },
            {
              likes: sauce.likes + 1,
              $push: { usersLiked: req.body.userId },
            }
          )
            .then(() =>
              res.status(200).json({ message: "Vous avez liké cette sauce" })
            )
            .catch((error) => res.status(400).json({ error }));
          console.log(" Positif pris en compte");
          break;
        case 0:
          if (sauce.usersLiked.includes(req.body.userId)) {
            Sauce.updateOne(
              { _id: sauce.id },
              {
                likes: sauce.likes - 1,
                $pull: { usersLiked: req.body.userId },
              }
            )
              .then(() =>
                res.status(200).json({
                  message: "Vous avez retiré le like ",
                })
              )
              .catch((error) =>
                res.status(400).json({
                  error,
                })
              );
          }
          if (sauce.usersDisliked.includes(req.body.userId)) {
            Sauce.updateOne(
              { _id: sauce.id },
              {
                $inc: { dislikes: -1 },
                $pull: { usersDisliked: req.body.userId },
              }
            )
              .then(() =>
                res.status(200).json({
                  message: "Vous avez retiré le dislike ",
                })
              )
              .catch((error) =>
                res.status(400).json({
                  error,
                })
              );
          }

          break;
        case -1:
          Sauce.updateOne(
            { _id: sauce.id },
            {
              dislikes: sauce.dislikes + 1,
              $push: { usersDisliked: req.body.userId },
            }
          )
            .then(() =>
              res.status(200).json({ message: "Vous avez disliké cette sauce" })
            )
            .catch((error) => res.status(400).json({ error }));
          console.log(" Négatif pris en compte");
          break;
        default:
          console.error("Votre avis n'a pas put être pris en compte");
          break;
      }
    })
    .catch((error) => {
      console.log(error);
      res.status(500).json({ error });
    });
};
