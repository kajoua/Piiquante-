// Récupération du modèle Sauce
const Sauce = require("../models/Sauce");
// donne accès aux fonctions qui nous permettent de modifier le système de fichiers, y compris aux fonctions permettant de supprimer les fichiers.
const fs = require("fs");

exports.getAllSauces = (req, res, next) => {
    Sauce.find()
        .then((sauces) => res.status(200).json(sauces))
        .catch((error) => res.status(400).json({ error }));
};
// Création d'une nouvelle sauce
exports.createSauce = (req, res, next) => {
    console.log("creation de sauce reussi");
    const sauceObject = JSON.parse(req.body.sauce);
    console.log(req.body);
    // Id générer automatiquement par MangoDB donc supp
    delete sauceObject._id;
    // delete sauceObject._userId ???? OU .userId ???;
    const sauce = new Sauce({
        // Opérateur spread ... (raccourcie = copier les champs qu'il y a dans le corp de la requête (req.bod.sauce) )
        ...sauceObject,
        userId: req.auth.userId,
        imageUrl: `${req.protocol}://${req.get("host")}/images/${
      req.file.filename
    }`,
        likes: 0,
        dislikes: 0,
        usersLiked: [],
        usersDisliked: [],
    });
    sauce
        .save()
        .then(() => {
            res.status(201).json({ message: "Sauce posté!" });
        })
        .catch((error) => {
            res.status(400).json({ error: error });
        });
};
exports.modifySauce = (req, res, next) => {
    const sauceObject = req.file ?
        {
            ...JSON.parse(req.body.sauce),
            imageUrl: `${req.protocol}://${req.get("host")}/images/${
          req.file.filename
        }`,
        } :
        {...req.body };
    // delete sauceObject._userId ????  OU userId ???;
    Sauce.findOne({ _id: req.params.id })
        .then((sauce) => {
            if (sauce.userId != req.auth.userId) {
                res.status(401).json({ message: "Non-autorisé" });
            } else {
                Sauce.updateOne({ _id: req.params.id, userId: sauceObject.userId }, {...sauceObject })
                    .then(() => res.statut(200).json({ message: "Sauce modifié" }))
                    .catch((error) => res.status(400).json({ error }));
            }
        })
        .catch((error) => res.status(400).json({ error }));
};

exports.deleteSauce = (req, res, next) => {
    Sauce.findOne({ _id: req.params.id })
        .then((sauce) => {
            if (sauce.userId != req.auth.userId) {
                res.status(401).json({ message: "Not authorized" });
            } else {
                const filename = sauce.imageUrl.split("/images/")[1];
                // methode .unlink() permet de supprimer un fichier du système de fichiers.
                fs.unlink(`images/${filename}`, () => {
                    Sauce.deleteOne({ _id: req.params.id })
                        .then(() => {
                            res.status(200).json({ message: "Objet supprimé !" });
                        })
                        .catch((error) => res.status(401).json({ error }));
                });
            }
        })
        .catch((error) => {
            res.status(500).json({ error });
        });
};
exports.getOneSauce = (req, res, next) => {
    Sauce.findOne({ _id: req.params.id })
        .then((sauce) => res.status(200).json(sauce))
        .catch((error) => res.status(404).json({ error }));
};

/////////////////////////////////////////// LIKE & DISLIKE /////////////////////////////////
//  Quand je crée une sauce les likes et dislikes sont à 0
// like:0
// dislike :0

// Récupère la sauce en question avec son ID
//  Récupérer le like dans le body, let like =req.body.like (?)
// Récupérer le like dans le body, let dislikes = req.body.dislike (?)

//  (Définit le statut « Like » pour l' userId fourni) sauce.userId = userLiked && userDisliked

// Si like = 1, l'utilisateur aime (= like) la sauce.
// if (like === 1){ sauceLikes.updateOne({ _id: req.params.id })}

// Si like = 0, l'utilisateur annule son like ou son dislike.
//if (like === 0){
//
//
// }

// Si like = -1, l'utilisateur n'aime pas (= dislike) la sauce. L'ID de l'utilisateur doit être ajouté ou retiré du tableau
// approprié. Cela permet de garder une trace de leurs préférences et les empêche de liker ou de ne pas disliker
// la même sauce plusieurs fois : un utilisateur ne peut avoir qu'une seule valeur pour chaque sauce. Le
// // nombre total de « Like » et de « Dislike » est mis à jour à chaque nouvelle notation.
// // if ( dislike === -1){ sauceLiked.updateOne({ _id: req.params.id })}

exports.likeDislikeSauce = (req, res, next) => {
    Sauce.findOne({ _id: req.params.id })
        .then((sauce) => {
            if (req.body.like == 1) {
                switch (like) {
                    case 1:
                        Sauce.updateOne({ _id: sauce.id }, {
                            likes: sauce.likes + 1,
                            $push: { usersLiked: req.body.userId },
                        });
                        console.log(" Positif pris en compte");
                        break;
                    case 0:
                        console.log("Vous n'avez pas donné votre avis sur la sauce");
                        break;
                    case -1:
                        Sauce.updateOne({ _id: s.id }, {
                            likes: sauce.likes + 1,
                            $pull: { usersDisliked: req.body.userId },
                        });
                        console.log("Négatif pris en compte");
                        break;
                }
            }

            // ICI METTRE LES LIKES / DISLIKES
        })
        .catch((error) => {
            res.status(500).json({ error });
        });
};

// Sauce.updateOne({ _id: s.id }, {
//     likes: s.likes + 1,
//     $push: { usersLiked: req.body.userId },
// });