// package de cryptage pour les mdp : npm install bcrypt
// importation du package
const bcrypt = require("bcrypt");
// package tokens chiffrés qui peuvent être utilisés pour l'autorisation : npm install jsonwebtoken
// importation du package
const jwt = require("jsonwebtoken");
// utilisation du modèle ( lecture et utilisation)
const User = require("../models/user");

// Création utilisateur
exports.signup = (req, res, next) => {
  // hachage du mdp avec cla fonction hash() de bcrypt => Fonction asynchrone donc en premier
  bcrypt
    //   .hash(mot du corp de la requête, cb de fois on execute l'algorithme de hachage ( 10 tour) si ++ = met + de tps)
    .hash(req.body.password, 10)
    // Asynchrone donc then/catch
    // Recupération hash de mdp => enregistrer dans un nouveau user dans la base de donnée
    .then((hash) => {
      // new création d'un nouveau ID
      const user = new User({
        email: req.body.email,
        password: hash,
      });
      user
        //   méthode save() enregistrer base de données
        .save()
        // réponse then 201 (nouvelle ressource a été créée) /catch
        .then(() => res.status(201).json({ message: "Utlisateur crée!" }))
        // error 400 : Erreur client
        .catch((error) => res.status(400).json({ error: error }));
    })
    //  erreur 500 : error serveur
    .catch((error) => res.status(500).json({ error }));
};

// Vérification utilisateur
exports.login = (req, res, next) => {
  // méthode findOne(objet ( sert de sélecteur) = champs (mail) et valeur transmise par le client (req.body.email))
  User.findOne({ email: req.body.email })
    // Promise ( récupérer l'enregistrement dans la base de donnée)
    .then((user) => {
      // vérification si l'utilisateur à été trouvé et mdp est correcte
      if (user === null) {
        return res
          .status(401)
          .json({ message: "paire identifiant mot de passe incorrect" });
      }
      // si utilisateur enregistré
      else {
        // Comparaison du mdp de la base de donnée avec mdp transmis
        // méthode compare() de bcrypt
        bcrypt
          // comparaison de ce qui a été transmis par le client (req.body.password)
          // ensuite ce qui est stocké dans la base de donnée (user.password)
          .compare(req.body.password, user.password)
          // promesse
          .then((valid) => {
            //regarder la valeur qui nous a été retourné
            if (!valid) {
              // 401 : erreur d'authenfication
              return res.status(401).json({
                message: "paire identifiant / mot de passe incorrect",
              });
            } else {
              // code 200 avec objet qui va contenir les infos nécessaire à
              //  l'authentification des réquêtes qui seront émises par la suite par le client
              res.status(200).json({
                userId: user._id,
                // fonction sign() de jsonwebtoken va prendre des arguements
                //  ( 1er agrguments : données que l'ont veut encodés = { userId: user._id })
                //2 arguement ( clé secrète pour l'encodage, "RANDOM_TOKEN_SECRET")
                // 3 arguement ( argument de configuration = elment d'expiration de notre token)
                // console => reseau => regardé sur la dernière requete =>headers =>Request headers => authorization => contient une chaine de caractère
                token: jwt.sign({ userId: user._id }, "RANDOM_TOKEN_SECRET", {
                  expiresIn: "24h",
                }),
              });
            }
          })
          // 500 :Error (serveur) de traitement
          .catch((error) => {
            res.status(500).json({ error });
          });
      }
      console.log("connecter");
    })
    .catch((error) => {
      // 500 :Error (serveur) d'execution de requete dans la base donnée
      res.status(500).json({ error });
      console.log("Non-connecter");
    });
};
